from django.db import models
import logging
from django.contrib.auth.models import User
from recipes.services.llm_services import build_structured_data

log = logging.getLogger(__name__)


class Recipe(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)
    title = models.CharField(max_length=255)
    ingredients_raw = models.TextField(help_text="Unstructured text of ingredients")
    ingredients_structured = models.JSONField(null=True, blank=True, help_text="Structured ingredients data generated by LLM")
    instructions = models.TextField(help_text="Step-by-step instructions for the recipe")
    is_cookidoo = models.BooleanField(default=False, help_text="Is this a Cookidoo recipe?")
    can_freeze = models.BooleanField(default=False, help_text="Can this meal be pre-cooked and frozen?")
    number_of_people = models.PositiveIntegerField(help_text="Number of people the recipe serves")
    duration_work = models.PositiveIntegerField(null=True, blank=True, help_text="Work duration in minutes")
    duration_total = models.PositiveIntegerField(null=True, blank=True, help_text="Total duration in minutes from start to finish")
    picture = models.ImageField(upload_to='recipes/', null=True, blank=True)

    def save(self, *args, **kwargs):
        if self.ingredients_raw:
            self.ingredients_structured = build_structured_data(self.ingredients_raw)
        super().save(*args, **kwargs)

    def __str__(self):
        return self.title


class RecipesSnapshot(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)
    snapshot = models.JSONField(null=False, blank=False, help_text="Structured shortlist of recipes")
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"RecipesSnapshot {self.id} - {self.user} - {self.timestamp}"

class ChatLog(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)
    user_message = models.TextField()
    bot_response = models.TextField(blank=True)
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"ChatLog {self.id} - {self.timestamp}"


class QdrantMapping(models.Model):
    point_id = models.CharField(max_length=255, unique=True)
    payload = models.JSONField()

    def __str__(self):
        return f"QdrantMapping {self.point_id}"
